{"version":3,"sources":["component/Cursor/Cursor.js","container/TypeWritter/TypeWritter.js","App.js","serviceWorker.js","index.js","component/Cursor/Cursor.module.css"],"names":["cursor","className","classes","Cursor","TypeWriter","state","completeSentence","typingSentence","timeToTypeCharacter","timeToWaitAfterComplete","isTyped","isLooped","writeSentence","setTimeout","setState","concat","charAt","length","clearSentence","typedArray","updatedTypedArray","i","push","this","prevProps","prevState","snapshot","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qTAOeA,EAJA,WACX,OAAO,0BAAMC,UAAWC,IAAQC,UC8DrBC,E,4MA3DXC,MAAQ,CACNC,iBAAkB,8HAChBC,eAAe,GACfC,oBAAoB,IACpBC,wBAAwB,IACxBC,SAAQ,EACRC,UAAS,G,EAKbC,cAAgB,WACZC,YAAW,WACP,EAAKC,SAAL,eACO,EAAKT,MADZ,CAEIE,eACI,EAAKF,MAAME,eAAeQ,OAAO,EAAKV,MAAMC,iBAAiBU,OAAO,EAAKX,MAAME,eAAeU,SAClGP,QAAS,EAAKL,MAAME,eAAeU,OAAQ,IAAM,EAAKZ,MAAMC,iBAAiBW,YAEnF,M,EAINC,cAAgB,WACZL,YAAW,WAGP,IAFA,IAAIM,EAAU,YAAO,EAAKd,MAAME,gBAC5Ba,EAAoB,GACfC,EAAE,EAAEA,EAAEF,EAAWF,OAAO,EAAEI,IAC/BD,EAAkBE,KAAKH,EAAWE,IAEtC,EAAKP,SAAL,eACM,EAAKT,MADX,CAEIE,eAAea,EACfV,UAAuC,IAA7BU,EAAkBH,aAElC,M,kEAIEM,KAAKlB,MAAMC,iBAAiBW,OAAS,GAA0C,IAArCM,KAAKlB,MAAME,eAAeU,SAAkBM,KAAKlB,MAAMK,SACjGa,KAAKX,kB,yCAIMY,EAAWC,EAAWC,GACjCH,KAAKlB,MAAME,eAAeU,SAAWM,KAAKlB,MAAMC,iBAAiBW,QAAYM,KAAKlB,MAAMK,QAEjFa,KAAKlB,MAAMK,SAAWa,KAAKlB,MAAMM,UACxCY,KAAKL,gBAFLK,KAAKX,kB,+BAOT,OACI,6BAAMW,KAAKlB,MAAME,eAAe,kBAACJ,EAAD,W,GAvDnBwB,aCMVC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,0B","file":"static/js/main.99dc3ae1.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Cursor.module.css';\n\nconst cursor = () => {\n    return(<span className={classes.Cursor}/>)\n};\n\nexport default cursor\n","import React,{Component} from 'react';\nimport classes from './TypeWritter.module.css';\n\n//import of other components\nimport Cursor from '../../component/Cursor/Cursor'\n\nclass TypeWriter extends Component {\n    state = {\n      completeSentence: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        typingSentence:[],\n        timeToTypeCharacter:100,\n        timeToWaitAfterComplete:1000,\n        isTyped:false,\n        isLooped:true,\n    };\n\n\n    // function to type the sentence\n    writeSentence = () => {\n        setTimeout(() => {\n            this.setState({\n                ...this.state,\n                typingSentence:\n                    this.state.typingSentence.concat(this.state.completeSentence.charAt(this.state.typingSentence.length)),\n                isTyped:(this.state.typingSentence.length)+1 === this.state.completeSentence.length\n            });\n        },100);\n    };\n\n    // function to clear the sentence after type. (if looped is true)\n    clearSentence = () => {\n        setTimeout(() => {\n            let typedArray = [...this.state.typingSentence];\n            let updatedTypedArray = [];\n            for (let i=0;i<typedArray.length-1;i++) {\n                updatedTypedArray.push(typedArray[i]);\n            }\n            this.setState({\n               ...this.state,\n                typingSentence:updatedTypedArray,\n                isTyped:!(updatedTypedArray.length === 0)\n            });\n        },100);\n    };\n\n    componentDidMount() {\n        if (this.state.completeSentence.length > 0 && this.state.typingSentence.length === 0 && !(this.state.isTyped)) {\n            this.writeSentence();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.typingSentence.length !== this.state.completeSentence.length && !(this.state.isTyped)){\n            this.writeSentence();\n        } else if (this.state.isTyped && this.state.isLooped) {\n            this.clearSentence();\n        }\n    }\n\n    render() {\n        return(\n            <div>{this.state.typingSentence}<Cursor/></div>\n        )\n    }\n}\n\nexport default TypeWriter;\n","import React from 'react';\n\nimport TypeWriter from './container/TypeWritter/TypeWritter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TypeWriter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cursor\":\"Cursor_Cursor__2Az8a\",\"cursor\":\"Cursor_cursor__1EDnu\"};"],"sourceRoot":""}